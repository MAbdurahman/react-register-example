{"version":3,"sources":["components/register-form/styles.js","components/register-form/RegisterForm.jsx","app/App.js","reportWebVitals.js","index.js"],"names":["makeStyles","theme","registerForm","marginTop","registerForm__buttonContainer","display","flexDirection","flexWrap","alignItems","justifyContent","registerForm__buttonStyle","width","margin","marginBottom","fontSize","fontWeight","letterSpacing","textTransform","backgroundColor","color","transition","registerForm__caption","textAlign","registerForm__errorMessage","height","registerForm__heading","registerForm__headingTitle","registerForm__link","textDecoration","registerForm__linkStyle","registerForm__paperStyle","maxWidth","maxHeight","padding","paddingBottom","registerForm__textFieldContainer","position","registerForm__textFieldIcon","marginRight","alignSelf","registerForm__textFieldStyle","RegisterForm","classes","useStyles","name_pattern","phone_pattern","email_pattern","password_pattern","lowercase_pattern","uppercase_pattern","digit_pattern","special_pattern","Grid","className","Paper","elevation","Typography","variant","initialValues","name","phone","email","password","confirmPassword","validate","values","errors","test","match","length","onSubmit","setSubmitting","resetForm","setTimeout","alert","JSON","stringify","isSubmitting","noValidate","as","TextField","type","label","component","Button","id","fullWidth","disabled","Link","href","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b61a9cdd.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport default makeStyles(theme => ({\r\n\tregisterForm: {\r\n\t\tmarginTop: '10vh',\r\n\t\t// textAlign: 'center',\r\n\t},\r\n\tregisterForm__buttonContainer: {\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'row',\r\n\t\tflexWrap: 'nowrap',\r\n\t\talignItems: 'center',\r\n\t\tjustifyContent: 'center',\r\n\t\tmarginTop: '1.25em',\r\n\t},\r\n\tregisterForm__buttonStyle: {\r\n\t\t// position: 'absolute',\r\n\t\t// left: '0',\r\n\t\t// top: '1.5em',\r\n\t\twidth: '92%',\r\n\t\tmargin: '1.5em auto',\r\n\t\tmarginBottom: '.5em',\r\n\t\tfontSize: '1.3rem',\r\n\t\tfontWeight: '500',\r\n\t\tletterSpacing: '2px',\r\n\t\ttextTransform: 'capitalize',\r\n\t\tbackgroundColor: '#423E37',\r\n\t\tcolor: '#EDEBD7',\r\n\t\ttransition: 'all .5s cubic-bezier(0.25, 0.45, 0.45, 0.95)',\r\n\t\t'&:hover': {\r\n\t\t\tbackgroundColor: '#3F51B5',\r\n\t\t\tcolor: '#FDEBD3',\r\n\t\t\ttextTransform: 'uppercase',\r\n\t\t},\r\n\t\t'&:disabled': {\r\n\t\t\tbackgroundColor: '#babcbe !important',\r\n\t\t},\r\n\t},\r\n\tregisterForm__caption: {\r\n\t\tfontSize: '1rem',\r\n\t\ttextAlign: 'center',\r\n\t},\r\n\tregisterForm__errorMessage: {\r\n\t\tdisplay: 'block',\r\n\t\twidth: '100%',\r\n\t\theight: '15px',\r\n\t\t// margin: '-.5em auto',\r\n\t\tmarginTop: '-1em',\r\n\t\tmarginBottom: '.5em',\r\n\t\tcolor: 'rgb(245, 41, 41)',\r\n\t\tfontSize: '.75rem',\r\n\t\tfontWeight: '800',\r\n\t\ttextAlign: 'center',\r\n\t},\r\n\tregisterForm__heading: {\r\n\t\tmarginBottom: '.7em',\r\n\t\ttextAlign: 'center',\r\n\t},\r\n\tregisterForm__headingTitle: {\r\n\t\tfontSize: '1.2rem',\r\n\t\tfontWeight: '800',\r\n\t\ttextTransform: 'uppercase',\r\n\t},\r\n\tregisterForm__link: {\r\n\t\tfontSize: '.8rem',\r\n\t\ttextDecoration: 'none',\r\n\t\t// textTransform: 'capitalize',\r\n\t\tcolor: '#423E37',\r\n\t\ttransition: 'all .5s cubic-bezier(0.25, 0.45, 0.45, 0.95)',\r\n\t\t'&:hover': {\r\n\t\t\tcolor: '#3F51B5',\r\n\t\t\ttextDecoration: 'none',\r\n\t\t\tfontWeight: '900',\r\n\t\t\ttextTransform: 'uppercase',\r\n\t\t\tletterSpacing: '1px',\r\n\t\t},\r\n\t},\r\n\tregisterForm__linkStyle: {\r\n\t\ttextAlign: 'center',\r\n\t\ttextDecoration: 'none',\r\n\t},\r\n\tregisterForm__paperStyle: {\r\n\t\tmaxWidth: '420px',\r\n\t\tmaxHeight: '640px',\r\n\t\tmargin: '2em auto',\r\n\t\tpadding: '2.75em 1.25em !important',\r\n\t\tpaddingBottom: '1em',\r\n\t},\r\n\tregisterForm__textFieldContainer: {\r\n\t\tposition: 'relative',\r\n\t\tdisplay: 'flex',\r\n\t\tflexDirection: 'row',\r\n\t\tflexWrap: 'nowrap',\r\n\t\talignItems: 'center',\r\n\t\tjustifyContent: 'center',\r\n\t\tmarginBottom: '1em',\r\n\t},\r\n\tregisterForm__textFieldIcon: {\r\n\t\tmarginRight: '5px',\r\n\t\talignSelf: 'center',\r\n\t},\r\n\tregisterForm__textFieldStyle: {\r\n\t\twidth: '80%',\r\n\t\t// marginBottom: '1em',\r\n\t},\r\n}));\r\n","import React from 'react';\r\nimport useStyles from './styles';\r\nimport { Button, Grid, Link, Paper, TextField, Typography } from '@material-ui/core';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport PhoneIcon from '@material-ui/icons/Phone';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport LockIcon from '@material-ui/icons/Lock';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\n\r\nexport default function RegisterForm() {\r\n   const classes = useStyles();\r\n   const name_pattern = /^([a-zA-Z]{2,}\\s[a-zA-z]{1,}'?-?[a-zA-Z]{1,}\\s?([a-zA-Z]{1,})?)/i;\r\n   // const phone_pattern = /^\\D?(\\d{3})\\D?\\D?(\\d{3})\\D?(\\d{4})$/i;\r\n   const phone_pattern = /^[(]{0,1}[0-9]{3}[)]{0,1}[-\\s.]{0,1}[0-9]{3}[-\\s.]{0,1}[0-9]{4}$/i;\r\n   const email_pattern = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i;\r\n   const password_pattern = /^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[-+_!@#$%^&*?]).{8,}$/i;\r\n   const lowercase_pattern = /^(?=.*[a-z])/g;\r\n   const uppercase_pattern = /^(?=.*[A-Z])/g;\r\n   const digit_pattern = /^(?=.*\\d{1,})/g;\r\n   const special_pattern = /(?=.*[-+_!@#$%^&*?])/g;\r\n\r\n\r\n\r\n   return (\r\n      <Grid className={classes.registerForm}>\r\n         <Paper elevation={20} className={classes.registerForm__paperStyle}>\r\n            <Grid className={classes.registerForm__heading}>\r\n               <h1 className={classes.registerForm__headingTitle}>Register Form</h1>\r\n               <Typography className={classes.registerForm__caption} variant='caption'>\r\n                  To create an account, complete this form!\r\n               </Typography>\r\n            </Grid>\r\n            <Formik\r\n               initialValues={{\r\n                  name: '',\r\n                  phone: '',\r\n                  email: '',\r\n                  password: '',\r\n                  confirmPassword: ''\r\n               }}\r\n               validate={values => {\r\n                  const errors = {};\r\n                  if (!values.name) {\r\n                     errors.name = 'First and last name are required!';\r\n\r\n                  } else if (!name_pattern.test(values.name)) {\r\n                     errors.name = 'Enter first and last name!';\r\n                  }\r\n\r\n                  if (!values.phone) {\r\n                     errors.phone = 'Phone number is required!';\r\n\r\n                  } else if (!phone_pattern.test(values.phone)) {\r\n                     errors.phone = 'Preferred phone pattern is:  123-456-7890!';\r\n                  }\r\n\r\n                  if (!values.email) {\r\n                     errors.email = 'Email address is required!';\r\n\r\n                  } else if (!email_pattern.test(values.email)) {\r\n                     errors.email = 'Enter valid email address!';\r\n                  }\r\n\r\n                  if (!values.password) {\r\n                     errors.password = 'Password is required!';\r\n\r\n                  } else if (!lowercase_pattern.test(values.password)) {\r\n                     errors.password = 'Password must have a lowercase character!';\r\n\r\n                  } else if (!uppercase_pattern.test(values.password)) {\r\n                     errors.password = 'Password must have an uppercase character!';\r\n\r\n                  } else if (!digit_pattern.test(values.password)) {\r\n                     errors.password = 'Password must have a digit character!';\r\n\r\n                  } else if (!special_pattern.test(values.password)) {\r\n                     errors.password = `Password must include at least one: '-+_!@#$%^&*?'`;\r\n\r\n                  } else if (!password_pattern.test(values.password)) {\r\n                     errors.password = 'Password must have at least 8 characters!';\r\n\r\n                  }\r\n\r\n                  if (!values.confirmPassword) {\r\n                     errors.confirmPassword = 'Confirmed password is required!';\r\n\r\n                  } else if (!values.confirmPassword.match(values.password)) {\r\n                     errors.confirmPassword = 'Confirmed password must match password!';\r\n\r\n                  } else if (values.confirmPassword.length !== values.password.length) {\r\n                     errors.confirmPassword = 'Confirmed password must match password!';\r\n                  }\r\n\r\n                  return errors;\r\n               }}\r\n               onSubmit={(values, { setSubmitting, resetForm }) => {\r\n                  setTimeout(() => {\r\n                     alert(JSON.stringify(values, null, 2));\r\n                     resetForm({});\r\n                     setSubmitting(false);\r\n                  }, 500);\r\n               }}\r\n\r\n            >\r\n               {({ isSubmitting }) => (\r\n                  <Form noValidate>\r\n                     <Grid className={classes.registerForm__textFieldContainer}>\r\n                        <AccountCircleIcon className={classes.registerForm__textFieldIcon} />\r\n                        <Field as={TextField}\r\n                           className={classes.registerForm__textFieldStyle}\r\n                           type='text'\r\n                           name='name'\r\n                           label='Name'\r\n                        />\r\n                     </Grid>\r\n                     <ErrorMessage\r\n                        className={classes.registerForm__errorMessage}\r\n                        name='name'\r\n                        component='span'\r\n                     />\r\n                     <Grid className={classes.registerForm__textFieldContainer}>\r\n                        <PhoneIcon className={classes.registerForm__textFieldIcon} />\r\n                        <Field as={TextField}\r\n                           className={classes.registerForm__textFieldStyle}\r\n                           type='text'\r\n                           name='phone'\r\n                           label='Phone'\r\n                        />\r\n                     </Grid>\r\n                     <ErrorMessage\r\n                        className={classes.registerForm__errorMessage}\r\n                        name='phone'\r\n                        component='span'\r\n                     />\r\n                     <Grid className={classes.registerForm__textFieldContainer}>\r\n                        <EmailIcon className={classes.registerForm__textFieldIcon} />\r\n                        <Field as={TextField}\r\n                           className={classes.registerForm__textFieldStyle}\r\n                           type='email'\r\n                           name='email'\r\n                           label='Email'\r\n                        />\r\n                     </Grid>\r\n                     <ErrorMessage\r\n                        className={classes.registerForm__errorMessage}\r\n                        name='email'\r\n                        component='span'\r\n                     />\r\n                     <Grid className={classes.registerForm__textFieldContainer}>\r\n                        <LockIcon className={classes.registerForm__textFieldIcon} />\r\n                        <Field as={TextField}\r\n                           className={classes.registerForm__textFieldStyle}\r\n                           type='password'\r\n                           name='password'\r\n                           label='Password'\r\n                        />\r\n                     </Grid>\r\n                     <ErrorMessage\r\n                        className={classes.registerForm__errorMessage}\r\n                        name='password'\r\n                        component='span'\r\n                     />\r\n                     <Grid className={classes.registerForm__textFieldContainer}>\r\n                        <LockOpenIcon className={classes.registerForm__textFieldIcon} />\r\n                        <Field as={TextField}\r\n                           className={classes.registerForm__textFieldStyle}\r\n                           type='password'\r\n                           name='confirmPassword'\r\n                           label='Confirm Password'\r\n                        />\r\n                     </Grid>\r\n                     <ErrorMessage\r\n                        className={classes.registerForm__errorMessage}\r\n                        name='confirmPassword'\r\n                        component='span'\r\n                     />\r\n                     <Grid className={classes.registerForm__textFieldContainer}>\r\n                        <Button\r\n                           id='buttonStyle'\r\n                           className={classes.registerForm__buttonStyle}\r\n                           type='submit'\r\n                           variant='contained'\r\n                           fullWidth\r\n                           disabled={isSubmitting}\r\n                        >\r\n                           Submit\r\n                        </Button>\r\n                     </Grid>\r\n                  </Form>\r\n               )}\r\n            </Formik>\r\n            <Typography className={classes.registerForm__linkStyle} >\r\n               <Link className={classes.registerForm__link} href=\"#\" >\r\n                  Terms and Conditions\r\n                  </Link>\r\n            </Typography>\r\n         </Paper>\r\n      </Grid>\r\n   );\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport RegisterForm from './../components/register-form/RegisterForm';\n\n\nfunction App() {\n  return (\n\t\t<div>\n\t\t\t<RegisterForm />\n\t\t</div>\n  ); \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}